@page "/"
@using System.IO
@using System.Collections.ObjectModel
@using devexBlazor.Data
@inject IJSRuntime JS
@inject IHttpClientFactory ClientFactory
@inject devexBlazor.Data.FileUrlStorageService _FileUrlStorageService
@inject NavigationManager _NavigationManager

@* @rendermode InteractiveServer *@
<PageTitle>Home</PageTitle>


<PageTitle>File Download 1</PageTitle>

<h1>File Download Example 1</h1>
<DxGrid id="dxGrid1" Data="@Data" KeyboardNavigationEnabled="true">
    <Columns>
        <DxGridDataColumn Caption="Date" FieldName="LastWriteTime" DisplayFormat="D" Width="10%" />
        <DxGridDataColumn FieldName="Id" Width="25%" />
        <DxGridDataColumn FieldName="Name" Width="*" />
    </Columns>
</DxGrid>
<h3>@var1</h3>
<button @onclick="DownloadFileFromStream">
    Download File From Stream
</button>
<button @onclick="DlFile">Dl file</button>
<div id="overviewDemoDropZone" class="card custom-drop-zone bg-light rounded-3 w-100 m-0">
    <span class="drop-file-icon mb-3"></span>
    <span>Drag and Drop File Here</span><span class="m-1">or</span>
    <button id="overviewDemoSelectButton" class="btn border-primary btn-primary m-1">Select File</button>
</div>
<DxUpload Name="ImageUpload"
          UploadUrl="@GetUploadUrl("/api/File/UploadFile/")"
          FileUploaded="@OnUploaded"
          ExternalSelectButtonCssSelector="#overviewDemoSelectButton"
          FileUploadStarted="@OnStarted"
          ExternalDropZoneCssSelector="#overviewDemoDropZone"
          ExternalDropZoneDragOverCssClass="bg-light border-secondary text-dark"
          ChunkSize="20000"
          ShowFileList="false"
          AllowedFileExtensions="@(new List<string> {".pdf"})">
</DxUpload>

@code {
    ObservableCollection<FileTag> Data { get; set; } = new ObservableCollection<FileTag>();
    string? _FileName;
    bool _HasDownload = true;
    int _SelectedFilesCount;

    protected string GetUploadUrl(string url)
    {
        return _NavigationManager.ToAbsoluteUri(url).AbsoluteUri;
    }
    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        _SelectedFilesCount = files.ToList().Count;
        InvokeAsync(StateHasChanged);
    }
    private void OnStarted(FileUploadEventArgs e)
    {
        _HasDownload = true;
    }
    async void OnUploaded(FileUploadEventArgs e)
    {
        _FileName = e.FileInfo.Name;
        _HasDownload = true;
    }
    async internal void DlFile()
    {
        try
        {
            List<FileTag> list = null;
            var httpClient = ClientFactory.CreateClient("MyApi");
            var fileTags = await httpClient.GetAsync("api/File/list").ContinueWith(async (t) =>
                {
                    var response = t.Result;
                    var jsonStr = await response.Content.ReadAsStringAsync();
                    list = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FileTag>>(jsonStr);
                });
            this.Data.Clear();
            if (list != null)
                foreach (var k in list) this.Data.Add(k);
            var response = await httpClient.GetStreamAsync($"api/File/{list.Last().Id}");
            var fileName = list.Last().Name;

            using var streamRef = new DotNetStreamReference(stream: response);

            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception e)
        {
            var1 = 9999;
        }

    }
    int var1 = 0;
    private Stream GetFileStream()
    {
        try
        {
            var p = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/favicon.png");
            var st = File.OpenRead(p.ToString());
            return st;
        }
        catch (Exception ex)
        {

        }
        var randomBinaryData = new byte[50 * 1024];
        var fileStream = new MemoryStream(randomBinaryData);

        return fileStream;
    }

    private async Task DownloadFileFromStream()
    {
        var1++;
        var fileStream = GetFileStream();
        var fileName = "log.png";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}